{
    "states": "[A_s0, B1, C]",
    "rewardVector": "[1, 2, 0]",
    "executeSteps_0": "[[1, 0, 0]]",
    "executeSteps_15": "[[1, 0, 0], [1/2, 1/2, 0], [1/4, 1/2, 1/4], [1/8, 1/2, 3/8], [1/16, 1/2, 7/16], [1/32, 1/2, 15/32], [1/64, 1/2, 31/64], [1/128, 1/2, 63/128], [1/256, 1/2, 127/256], [1/512, 1/2, 255/512], [1/1024, 1/2, 511/1024], [1/2048, 1/2, 1023/2048], [1/4096, 1/2, 2047/4096], [1/8192, 1/2, 4095/8192], [1/16384, 1/2, 8191/16384], [1/32768, 1/2, 16383/32768]]",
    "classifyTransientRecurrent": "[[A_s0], [B1, C]]",
    "classifyPeriodicity": {
        "B1": "1.0000",
        "C": "1.0000"
    },
    "determineMCType": "ergodic unichain",
    "hittingProbabilities": {
        "A_s0": "1",
        "B1": "1",
        "C": "1"
    },
    "limitingMatrix": "[[0, 0, 0], [1/2, 1/2, 1/2], [1/2, 1/2, 1/2]]",
    "limitingDistribution": "[0, 1/2, 1/2]",
    "longRunReward": "1",
    "transient_reward_0_step_0": "1",
    "transient_reward_10_step_0": "1",
    "transient_reward_10_step_1": "3/2",
    "transient_reward_10_step_2": "5/4",
    "transient_reward_10_step_3": "9/8",
    "transient_reward_10_step_4": "17/16",
    "transient_reward_10_step_5": "33/32",
    "transient_reward_10_step_6": "65/64",
    "transient_reward_10_step_7": "129/128",
    "transient_reward_10_step_8": "257/256",
    "transient_reward_10_step_9": "513/512",
    "transient_reward_10_step_10": "1025/1024",
    "markovTrace_0": "[A_s0]",
    "markovTrace_15": "[A_s0, A_s0, B1, B1, C, C, C, B1, C, B1, B1, C, B1, B1, C, B1]",
    "longRunExpectedAverageReward_cycle": "[None, None, None, None, None, Number of cycles]",
    "longRunExpectedAverageReward_steps": "[None, None, None, None, None, Maximum path length]",
    "longRunExpectedAverageReward_abs": "[[0.7079, 1.0064], 0.1492, 0.2108, 0.8571, 0.9731, Absolute Error]",
    "longRunExpectedAverageReward_rel": "[[0.9430, 1.4416], 0.2493, 0.2644, 1.1923, 1.1880, Relative Error]",
    "cezaroLimitDistribution_cycle": "[None, [None, None, None], [None, None, None], None, None, Number of cycles]",
    "cezaroLimitDistribution_steps": "[None, [None, None, None], [None, None, None], None, None, Maximum path length]",
    "cezaroLimitDistribution_abs": "[[[0.0000, 0.0000], [0.4192, 0.6717], [0.3283, 0.5808]], [0.0000, 0.1262, 0.1262], [None, 0.3011, 0.3844], [0.0000, 0.5455, 0.4545], [0.0000, 0.6467, 0.6467], Absolute Error]",
    "cezaroLimitDistribution_rel": "[[[0.0000, 0.0000], [0.4959, 0.5593], [0.4407, 0.5041]], [0.0000, 0.0317, 0.0317], [None, 0.0640, 0.0720], [0.0000, 0.5276, 0.4724], [0.0000, 0.7035, 0.7035], Maximum path length]",
    "estimationExpectedReward_step": "[None, None, None, None, None, Number of Paths]",
    "estimationExpectedReward_abs": "[[1.3548, 1.7119], 0.1785, 0.1318, 1.5333, 0.4989, Absolute Error]",
    "estimationExpectedReward_rel": "[[1.5360, 1.8640], 0.1640, 0.1068, 1.7000, 0.4583, Relative Error]",
    "estimationDistribution": "[None, [None, None, None], [None, None, None], None, None, Number of Paths]",
    "estimationHittingState": "[{'A_s0': '[None, None, None, None, None]', 'B1': '[None, None, None, None, None]', 'C': '[None, None, None, None, None]'}, {'A_s0': 'Number of Paths', 'B1': 'Number of Paths', 'C': 'Number of Paths'}]",
    "estimationHittingreward": "[{'A_s0': '[None, None, None, None, None]', 'B1': '[None, None, None, None, None]', 'C': '[None, None, None, None, None]'}, {'A_s0': 'Number of Paths', 'B1': 'Number of Paths', 'C': 'Number of Paths'}]",
    "estimationHittingStateSet": "[{'A_s0': '[None, None, None, None, None]', 'B1': '[None, None, None, None, None]', 'C': '[None, None, None, None, None]'}, {'A_s0': 'Number of Paths', 'B1': 'Number of Paths', 'C': 'Number of Paths'}]",
    "estimationHittingRewardSet": "[{'A_s0': '[None, None, None, None, None]', 'B1': '[None, None, None, None, None]', 'C': '[None, None, None, None, None]'}, {'A_s0': 'Number of Paths', 'B1': 'Number of Paths', 'C': 'Number of Paths'}]",
    "convert_to_DSL": "markov chain TestName {\n\tA_s0 [p: 1; r: 1] -- 1/2 --> A_s0\n\tA_s0 -- 1/2 --> B1\n\tB1 [p: 0; r: 2] -- 1/2 --> B1\n\tB1 -- 1/2 --> C\n\tC [p: 0] -- 1/2 --> B1\n\tC -- 1/2 --> C\n}\n"
}